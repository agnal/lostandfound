name: Backend CI

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Build, Test, and Run (PM2)
    runs-on: self-hosted

    # IMPORTANT: bind to your GitHub Environment so environment secrets are available
    environment:
      name: production  # <-- change this to your environment's name

    strategy:
      matrix:
        node-version: [22]

    # Job-level env: safe to reference, but NEVER echo them
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      PORT: ${{ secrets.PORT }}
      PROD: ${{ secrets.PROD }}  # optional: multi-line env blob if you use it

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Ensure PM2
        run: npm i -g pm2

      - name: Stop PM2 apps if any (no-op OK)
        run: pm2 stop all || echo "No PM2 processes to stop"

      # ---------- Backend ----------
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          npm ci || npm install

      - name: Write .env for backend
        working-directory: ./backend
        shell: bash
        run: |
          # Write the 3 standard vars if present
          [ -n "${MONGO_URI}" ] && echo "MONGO_URI=${MONGO_URI}" >> .env
          [ -n "${JWT_SECRET}" ] && echo "JWT_SECRET=${JWT_SECRET}" >> .env
          [ -n "${PORT}" ] && echo "PORT=${PORT}" >> .env

          # If you keep a full .env blob in PROD secret, write it last to override
          if [ -n "${PROD}" ]; then
            printf "%s" "${PROD}" >> .env
            echo ".env merged with PROD environment secret"
          else
            echo ".env written from individual secrets"
          fi

      - name: Run Backend Tests
        working-directory: ./backend
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
        run: npm test

      # ---------- Frontend (optional, only if the folder exists) ----------
      - name: Install Frontend Dependencies (if present)
        if: ${{ hashFiles('frontend/package.json') != '' }}
        working-directory: ./frontend
        run: |
          rm -rf ./build
          npm ci || npm install

      - name: Build Frontend (if present)
        if: ${{ hashFiles('frontend/package.json') != '' }}
        working-directory: ./frontend
        run: npm run build

      # ---------- PM2 start/reload ----------
      - name: Start/Reload PM2 (backend)
        working-directory: ./backend
        shell: bash
        run: |
          if [ -f ecosystem.config.js ]; then
            # Use ecosystem if you have it committed
            pm2 start ecosystem.config.js --env production || pm2 reload ecosystem.config.js --env production
          else
            # Direct script fallback; name your app consistently
            pm2 start server.js --name task-manager-backend || pm2 reload task-manager-backend
          fi

      - name: Save PM2 process list
        run: pm2 save || true
